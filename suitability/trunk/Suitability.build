<?xml version="1.0" encoding="utf-8" ?>
<project name="test-oriented suitability" default="suitability"
    xmlns="http://testoriented.googlecode.com/schemas/nant.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://testoriented.googlecode.com/schemas/nant.xsd Tools/NAnt.xsd">

    <loadtasks assembly="Tools/nantcontrib/bin/NAnt.Contrib.Tasks.dll" />
    <loadtasks assembly="Tools/SoftwareNinjas.NAnt.dll" />

    <property name="configuration" value="Release" overwrite="false" />

    <property name="baseStrategy" value="base" />
    <property name="manualSmeStrategy" value="manual" />
    <property name="automaticSmeStrategy" value="testoriented" />
    <property name="strategies" value="${baseStrategy},${manualSmeStrategy}" />

    <property name="projects" value="AtomicCms,KeePassLib,StringExtensions,Textile" />
    
    <property name="pexFolder" value="Tools/Pex-0.91.50418.0" />
    <property name="ncoverFolder" value="Tools/NCover-1.5.8" />
    <property name="nunitFolder" value="Tools/NUnit-2.4.8" />

    <target name="schema">
        <nantschema output="Tools/NAnt.xsd" target-ns="http://testoriented.googlecode.com/schemas/nant.xsd"/>
    </target>

    <target name="prepare">
        <comregister>
            <fileset>
                <include name="${pexFolder}/Microsoft.ExtendedReflection.ClrMonitor.X86.dll" />
                <include name="${ncoverFolder}/CoverLib.dll" />
            </fileset>
        </comregister>
        <exec program="Tools/gacutil.exe">
            <arg value="/i" />
            <arg file="${pexFolder}/Microsoft.ExtendedReflection.dll" />
            <arg value="/f" />
        </exec>
        <exec program="reg.exe">
            <arg value="import" />
            <arg file="${pexFolder}/HKLM_Software_Microsoft_Fusion.reg" />
        </exec>
    </target>

    <target name="clean">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <property name="toddDestinationDir" value="Projects/${project}/${automaticSmeStrategy}" />
            <if test="${directory::exists(toddDestinationDir)}">
                <delete dir="${toddDestinationDir}" failonerror="false" />
            </if>
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="destinationDir" value="Projects/${project}/working-${strategy}" />
                <if test="${directory::exists(destinationDir)}">
                    <delete dir="${destinationDir}" failonerror="false" />
                </if>
            </foreach>
        </foreach>
    </target>

    <target name="compile">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <clean
                    configuration="${configuration}"
                    projects="${project},${project}.Tests"
                    basedir="Projects/${project}/working-${strategy}"/>
            </foreach>
        </foreach>
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <msbuild project="Projects/${project}/working-${strategy}/${project}.sln">
                    <arg value="/property:Configuration=${configuration}" />
                    <arg value="/verbosity:minimal" />
                </msbuild>
            </foreach>
        </foreach>
    </target>

    <target name="createautomaticSmeStrategy">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <property name="destinationDir" value="Projects/${project}/${automaticSmeStrategy}" />
            <if test="${directory::exists(destinationDir)}">
                <delete dir="${destinationDir}" failonerror="false" />
            </if>
            <copy todir="${destinationDir}">
                <fileset basedir="Projects/${project}/${baseStrategy}">
                    <include name="**" />
                </fileset>
            </copy>
            <!-- TODO: apply TODD at destinationDir -->
        </foreach>
    </target>

    <target name="createWorkingCopies">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="destinationDir" value="Projects/${project}/working-${strategy}" />
                <if test="${directory::exists(destinationDir)}">
                    <delete dir="${destinationDir}" failonerror="false" />
                </if>
                <copy todir="${destinationDir}">
                    <fileset basedir="Projects/${project}/${strategy}">
                        <include name="**" />
                    </fileset>
                </copy>
            </foreach>
        </foreach>
    </target>

    <target name="invokePexWizard">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects/${project}/working-${strategy}" />
                <exec program="${pexFolder}/pexwizard.exe">
                    <environment>
                        <variable name="moles_appdir" dir="${pexFolder}" />
                    </environment>
                    <arg file="${projectFolder}/${project}/bin/${configuration}/${project}.dll" />
                    <arg value="/TestFramework:NUnit" />
                    <arg value="/ClrVersion2" />
                    <arg value="/NoMoles" />
                    <arg value="/NoCompilation" />
                    <arg value="/TestProjectFile:${projectFolder}/${project}.Tests/${project}.Tests.csproj" />
                </exec>
            </foreach>
        </foreach>
    </target>

    <target name="fixPexWizardResults">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects/${project}/working-${strategy}" />
                <property name="testProjectFile" value="${projectFolder}/${project}.Tests/${project}.Tests.csproj" />

                <delete file="${testProjectFile}.bak" failonerror="false" />
                <move file="${testProjectFile}" tofile="${testProjectFile}.bak" />
                <style style="Tools/FixPexWizard.xsl" in="${testProjectFile}.bak" out="${testProjectFile}">
                    <parameters>
                        <parameter namespaceuri=""
                                   name="baseDir"
                                   value="${directory::get-current-directory()}"/>
                        <parameter namespaceuri=""
                                   name="projectName"
                                   value="${project}" />
                        <parameter namespaceuri=""
                                   name="pexFolder"
                                   value="${string::replace(pexFolder, '/', '\')}" />
                    </parameters>
                </style>
            </foreach>
        </foreach>
    </target>

    <target name="invokePexGenerator">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects/${project}/working-${strategy}" />
                <property name="testProjectFile" value="${projectFolder}/${project}.Tests/${project}.Tests.csproj" />
                <exec program="${pexFolder}/pex.x86.exe">
                    <environment>
                        <variable name="moles_appdir" dir="${pexFolder}" />
                    </environment>
                    <arg file="${projectFolder}/${project}.Tests/bin/${configuration}/${project}.Tests.dll" />
                    <arg value="/Targetx86" />
                    <arg value="/AssemblyResolutionDirectories:Tools\NUnit-2.4.8" />
                    <arg value="/ClrVersion2" />
                    <arg value="/DoNotOpenReport" />
                    <arg value="/PreferredLineWidth:120" />
                    <arg value="/ReportLevel:None" />
                    <arg value="/TestLanguage:cs" />
                    <arg value="/TestProjectFile:&quot;${path::get-full-path(testProjectFile)}&quot;" />
                </exec>
            </foreach>
        </foreach>
    </target>

    <target name="fixPexGeneratorResults">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects/${project}/working-${strategy}" />
                <property name="testProjectFile" value="${projectFolder}/${project}.Tests/${project}.Tests.csproj" />

                <delete file="${testProjectFile}.bak" failonerror="false" />
                <move file="${testProjectFile}" tofile="${testProjectFile}.bak" />
                <style style="Tools/FixPexGenerator.xsl" in="${testProjectFile}.bak" out="${testProjectFile}">
                    <parameters>
                        <parameter namespaceuri=""
                                   name="baseDir"
                                   value="${directory::get-current-directory()}"/>
                        <parameter namespaceuri=""
                                   name="projectName"
                                   value="${project}" />
                    </parameters>
                </style>
            </foreach>
        </foreach>
    </target>

    <target name="testWithCoverage">
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects\${project}\working-${strategy}" />
                <property name="coverageFile" value="${projectFolder}\coverage.xml" />
                <delete file="${coverageFile}" failonerror="false" />
                <exec program="Tools/NCover-1.5.8/NCover.Console.exe" failonerror="false">
                    <arg value="//w" />
                    <arg value="${projectFolder}\${project}.Tests\bin\${configuration}" />
                    <arg value="//a" />
                    <arg value="${project}" />
                    <arg value="//x" />
                    <arg value="${coverageFile}" />
                    <arg value="//l" />
                    <arg value="${projectFolder}\coverage.log" />
                    <arg value="${nunitFolder}/nunit-console-x86.exe" />
                    <arg value="/nologo" />
                    <arg value="/nodots" />
                    <arg value="/noshadow" />
                    <arg value="${project}.Tests.dll" />
                </exec>
            </foreach>
        </foreach>
    </target>

    <target name="postResults">
        <if test="${environment::variable-exists('SVN_REVISION')}">
            <property name="svnRevision" value="${environment::get-variable('SVN_REVISION')}"/>
        </if>
        <if test="${not environment::variable-exists('SVN_REVISION')}">
            <property name="svnRevision" value="private"/>
        </if>
        <property name="toddVersion" value="n/a" />
        <foreach item="String" in="${projects}" delim="," property="project">
            <echo message="Project: ${project}..." />
            <foreach item="String" in="${strategies}" delim="," property="strategy">
                <property name="projectFolder" value="Projects/${project}/working-${strategy}" />
                <property name="testProjectFile" value="${projectFolder}/${project}.Tests/${project}.Tests.csproj" />
                <property name="coverageFile" value="${projectFolder}/coverage.xml" />
                <xpath file="${coverageFile}" property="tsp" query="count(//seqpnt)" />
                <xpath file="${coverageFile}" property="vsp" query="count(//seqpnt[not(@visitcount='0')])" />
                <post action="https://spreadsheets0.google.com/formResponse?formkey=dG9zQnFtTlQ0Z1dGUjI5TUlFMnpFWWc6MQ&amp;ifq">
                    <!-- Batch # -->        <input name="entry.1.single" value="${svnRevision}" />
                    <!-- Project -->        <input name="entry.2.single" value="${project}" />
                    <!-- Strategy -->       <input name="entry.3.single" value="${strategy}" />
                    <!-- TODD version -->   <input name="entry.4.single" value="${toddVersion}" />
                    <!-- TSP -->            <input name="entry.5.single" value="${tsp}" />
                    <!-- VSP -->            <input name="entry.6.single" value="${vsp}" />
                    <!-- Google -->         <input name="pageNumber" value="0" />
                    <!-- Google -->         <input name="backupCache" value="" />
                    <!-- Google -->         <input name="submit" value="Submit" />
                </post>
            </foreach>
        </foreach>
    </target>

    <target name="suitability">
        <!-- Step 0: clean all working copies -->
        <call target="clean" />
        
        <!-- Step 1: copy baseStrategy to automaticSmeStrategy and apply TODD on it -->
        <!-- TODO: uncomment when ready:
        <call target="createAutomaticSmeStrategy" />
        -->

        <!-- Step 2: create working copies -->
        <call target="createWorkingCopies" />

        <!-- Step 3: compile -->
        <call target="compile" />

        <!-- Step 4: invoke Pex wizard -->
        <call target="invokePexWizard" />

        <!-- Step 5: fix test projects -->
        <call target="fixPexWizardResults" />

        <!-- Step 6: compile -->
        <call target="compile" />

        <!-- Step 7: invoke Pex generator -->
        <call target="invokePexGenerator" />

        <!-- Step 8: fix test projects -->
        <call target="fixPexGeneratorResults" />

        <!-- Step 9: compile -->
        <call target="compile" />

        <!-- Step 10: run tests with code coverage -->
        <call target="testWithCoverage" />

        <!-- Step 11: interpret coverage report -->
        <call target="postResults" />
    </target>

</project>
