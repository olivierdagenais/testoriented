<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftwareNinjas.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.TextTemplating.TextTransformation">
            <summary>
            The abstract base class for all generated transformation classes. This class also provides utility methods and
            properties for use in text template code.
            </summary>
            
            <remarks>
            <para>
            The text template transformation process has two steps. In the first step, the text template transformation
            engine creates a class that is referred to as the generated transformation class. In the second step, the engine
            compiles and executes the generated transformation class, to produce the generated text output. The generated
            transformation class inherits from <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/>.
            </para>
            <para>
            Any class specified in an <c>inherits</c> directive in a text template must itself inherit from
            <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/>. <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.TransformText"/> is the only abstract member of this class.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Initialize">
            <summary>
            Initializes the <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/> class.  
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.TransformText">
            <summary>
            When overridden in a derived class, generates the text output of the transformation. 
            </summary>
            
            <returns>
            A string representing the generated text output of the text template transformation process.
            </returns>
            
            <remarks>
            The text template transformation process has two steps. In the first step, the text template transformation
            engine creates a class that is named the generated transformation class. In the second step, the engine
            compiles and executes the generated transformation class, to produce the generated text output. The engine
            calls <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.TransformText"/> on the compiled generated transformation class to execute the text
            template and generate the text output.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Error(System.String)">
            <summary>
            Creates a new error to store information about errors that occur during the text template transformation
            process.
            </summary>
            
            <param name="message">
            A message that describes the error.
            </param>
            
            <remarks>
            Adds the error to the collection of <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.Errors"/> for the text template transformation process. Sets
            the line number of the error to -1, and the column number of the error to -1 by default.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Warning(System.String)">
            <summary>
            Creates a new warning to store information about errors that occur during the text template transformation
            process.
            </summary>
            
            <param name="message">
            A message that describes the warning.
            </param>
            
            <remarks>
            Adds the warning to the collection of <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.Errors"/> for the text template transformation process.
            Sets the line number of the error to -1, and the column number of the error to -1 by default.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent">
            <summary>
            Removes the most recently added text from <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"/> that contains the text most recently added to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> is commonly called without capturing the return value.
            </returns>
            
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> represents text that is prefixed to each line of the generated text output.
            The indent text can be spaces only, for example "    ", or it can include words.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)"/> adds text to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be called more than once.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent"/> removes the most recently added text from <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be
            called more than once. <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent"/> removes all text from the <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)">
            <summary>
            Adds text to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, which is prefixed to each line of the generated text output. 
            </summary>
            
            <param name="indent">
            The text to add to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>. If <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> already contains text,
            <paramref name="indent"/> is appended to the existing text.
            </param>
            
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> represents text that is prefixed to each line of the generated text output.
            The indent text can be spaces only, for example "    ", or it can include words.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)"/> adds text to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be called more than once.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent"/> removes the most recently added text from <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be
            called more than once. <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent"/> removes all text from the <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent">
            <summary>
            Resets the <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> to an empty string.
            </summary>
            
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> represents text that is prefixed to each line of the generated text output.
            The indent text can be spaces only, for example "    ", or it can include words.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)"/> adds text to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be called more than once.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent"/> removes the most recently added text from <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be
            called more than once. <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent"/> removes all text from the <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ToStringWithCulture(System.Object)">
            <summary>
            Returns a <b>String</b> that represents the specified <b>Object</b>.
            </summary>
            
            <param name="objectToConvert">
            The <see cref="T:System.Object"/> to represent as a <see cref="T:System.String"/>.
            </param>
            
            <returns>
            A <b>String</b> that represents the specified <b>Object</b>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Write(System.Object)">
            <summary>
            Appends a string representation of the specified object to the generated text output.
            </summary>
            
            <param name="objectToAppend">
            The <see cref="T:System.Object"/> to append.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            Enlarging the value of the underlying <see cref="T:System.Text.StringBuilder"/> would exceed
            <see cref="P:System.Text.StringBuilder.MaxCapacity"/>.
            </para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Write(System.String)">
            <summary>
            Appends a copy of the specified string to the generated text output.
            </summary>
            
            <param name="textToAppend">
            The string to append.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            Enlarging the value of the underlying <see cref="T:System.Text.StringBuilder"/> would exceed
            <see cref="P:System.Text.StringBuilder.MaxCapacity"/>.
            </para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Write(System.String,System.Object[])">
            <summary>
            Appends a formatted string, which contains zero or more format specifications, to the generated text output.
            Each format specification is replaced by the string representation of a corresponding object argument.
            </summary>
            
            <param name="format">
            A string that contains zero or more format specifications.
            </param>
            
            <param name="args">
            An array of objects to format.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <para>
            <paramref name="format"/> is <see langword="null"/>.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="args"/> is <see langword="null"/>.
            </para>
            </exception>
            
            <exception cref="T:System.FormatException">
            <para>
            <paramref name="format"/> is invalid.
            </para>
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            Enlarging the value of the underlying <see cref="T:System.Text.StringBuilder"/> would exceed
            <see cref="P:System.Text.StringBuilder.MaxCapacity"/>.
            </para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.WriteLine(System.String)">
            <summary>
            Appends a copy of the specified string and the default line terminator to the generated text output.
            </summary>
            
            <param name="textToAppend">
            The string to write.
            </param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            Enlarging the value of the underlying <see cref="T:System.Text.StringBuilder"/> would exceed
            <see cref="P:System.Text.StringBuilder.MaxCapacity"/>.
            </para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.WriteLine(System.String,System.Object[])">
            <summary>
            Appends a formatted string, which contains zero or more format specifications, and the default line
            terminator, to the generated text output. Each format specification is replaced by the string representation
            of a corresponding object argument.
            </summary>
            
            <param name="format">
            A string that contains zero or more format specifications.
            </param>
            
            <param name="args">
            An array of objects to format.
            </param>
            
            <exception cref="T:System.ArgumentNullException">
            <para>
            <paramref name="format"/> is <see langword="null"/>.
            </para>
            <para>
            -or-
            </para>
            <para>
            <paramref name="args"/> is <see langword="null"/>.
            </para>
            </exception>
            
            <exception cref="T:System.FormatException">
            <para>
            <paramref name="format"/> is invalid.
            </para>
            </exception>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            Enlarging the value of the underlying <see cref="T:System.Text.StringBuilder"/> would exceed
            <see cref="P:System.Text.StringBuilder.MaxCapacity"/>.
            </para>
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.VisualStudio.TextTemplating.TextTransformation"/> and optionally releases the
            managed resources.
            </summary>
            
            <param name="disposing">
            <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.FormatProvider">
            <summary>
            Gets or sets the culture-specific formatting information that is used when calling
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ToStringWithCulture(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.Errors">
            <summary>
            Gets the error collection for the text template transformation process.
            </summary>
            
            <value>
            A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> that contains the errors and warnings raised during the text
            template transformation process. 
            </value>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent">
            <summary>
            Gets the current indent text, which is prefixed to each line of the generated text output.
            </summary>
            
            <value>
            A <see cref="T:System.String"/> that contains the text that is prefixed to each line of the generated text output.
            </value>
            
            <remarks>
            The <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/> represents text that is prefixed to each line of the generated text output.
            The indent text can be spaces only, for example "    ", or it can include words.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PushIndent(System.String)"/> adds text to <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be called more than once.
            <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.PopIndent"/> removes the most recently added text from <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>, and can be
            called more than once. <see cref="M:Microsoft.VisualStudio.TextTemplating.TextTransformation.ClearIndent"/> removes all text from the <see cref="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.CurrentIndent"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.TextTemplating.TextTransformation.GenerationEnvironment">
            <summary>
            Gets or sets the string that the text template transformation process is using to assemble the generated
            text output.
            </summary>
            
            <value>
            A <see cref="T:System.Text.StringBuilder"/> that contains the generated text transformation.
            </value>
        </member>
        <member name="T:SoftwareNinjas.Core.AssemblyExtensions">
            <summary>
            Extension methods to augment the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.AssemblyExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Convenience method to obtain the first (and usually only) assembly-level attribute of type
            <typeparamref name="T"/> from the specified <paramref name="assembly"/>.
            </summary>
            
            <typeparam name="T">
            The type of an <see cref="T:System.Attribute"/> known (or thought) to be applied at the assembly level.
            </typeparam>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to query for an attribute of type <typeparamref name="T"/>.
            </param>
            
            <returns>
            An instance of <typeparamref name="T"/> representing the applied attribute if such an attribute was found;
            <see langword="null"/> otherwise.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.AssemblyExtensions.OpenScopedResourceStream``1(System.String)">
            <summary>
            Loads the specified manifest resource, scoped by the namespace of the <typeparamref name="T"/> type, from
            the <see cref="T:System.Reflection.Assembly"/> which defines the <typeparamref name="T"/> type.
            </summary>
            
            <typeparam name="T">
            The type whose namespace is used to scope the manifest resource name.
            </typeparam>
            
            <param name="name">
            The case-sensitive name of the manifest resource being requested.
            </param>
            
            <returns>
            A <see cref="T:System.IO.Stream"/> representing the manifest resource; <see langword="null"/> if no resources were
            specified during compilation or if the resource is not visible to the caller.
            </returns>
            
            <seealso cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)"/>
        </member>
        <member name="M:SoftwareNinjas.Core.AssemblyExtensions.GenerateHeader(System.Reflection.Assembly)">
            <summary>
            Combines a few attributes decorating the provided <paramref name="assembly"/> into a descriptive string to
            inform end-users about the product, version, copyright and registered user.
            </summary>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> to query.
            </param>
            
            <returns>
            A user-friendly string representing two lines of text.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.EnumerableExtensions">
            <summary>
            Extension methods to augment implementations of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with an extra item at the beginning.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="firstItem">
            The item to enumerate first.
            </param>
            
            <param name="items">
            The items to enumerate after <paramref name="firstItem"/>.
            </param>
            
            <returns>
            An enumeration of <paramref name="firstItem"/> and then all the items in <paramref name="items"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with an extra item at the end.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="items">
            The items to enumerate before <paramref name="lastItem"/>.
            </param>
            
            <param name="lastItem">
            The item to enumerate last.
            </param>
            
            <returns>
            An enumeration of all the items in <paramref name="items"/> and then <paramref name="lastItem"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Simulates extending an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with another so that a single loop may be used over two
            sources of <typeparamref name="T"/>.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="firstItems">
            The items to enumerate first.
            </param>
            
            <param name="lastItems">
            The items to enumerate last.
            </param>
            
            <returns>
            An enumeration of all the items in <paramref name="firstItems"/> and then all those in
            <paramref name="lastItems"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a set of <paramref name="items"/> of type <typeparamref name="T"/> based on the provided
            <paramref name="predicate"/>.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="items">
            The items to filter.
            </param>
            
            <param name="predicate">
            A function that determines whether to keep each item (<see langword="true"/>)
            or not (<see langword="false"/>).
            </param>
            
            <returns>
            The <paramref name="items"/> for which <paramref name="predicate"/> returned <see langword="true"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            
            <param name="source">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of.
            </param>
            
            <returns>
            <b>default</b>(<typeparamref name="T"/>) if <paramref name="source"/> is empty; otherwise, the first element
            in <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action)">
            <summary>
            Applies <paramref name="each"/> to items of a sequence or calls <paramref name="else"/> if the sequence
            was empty.
            </summary>
            
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to enumerate.
            </param>
            
            <param name="each">
            A function that will be called for each of the items in the sequence.  Return <see langword="false"/> to
            stop the enumeration.
            </param>
            
            <param name="else">
            An action that will be called if the sequence did not yield any items.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
            <summary>
            Applies <paramref name="each"/> to items of a sequence or calls <paramref name="else"/> if the sequence
            was empty.
            </summary>
            
            <typeparam name="T">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements to enumerate.
            </param>
            
            <param name="each">
            An action that will be called for each of the items in the sequence.
            </param>
            
            <param name="else">
            An action that will be called if the sequence did not yield any items.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Combines two sequences such that the <paramref name="insertedItems"/> will appear before the
            <paramref name="items"/> at the provided <paramref name="insertionIndex"/>, followed by the rest of the
            <paramref name="items"/>.
            </summary>
            
            <typeparam name="T">
            The type of <paramref name="items"/> and <paramref name="insertedItems"/>.
            </typeparam>
            
            <param name="items">
            The sequence in which to insert <paramref name="insertedItems"/>.
            </param>
            
            <param name="insertedItems">
            The sequence to insert into <paramref name="items"/>.
            </param>
            
            <param name="insertionIndex">
            The index of the item in <paramref name="items"/> before which <paramref name="insertedItems"/> will be
            inserted.
            </param>
            
            <returns>
            A sequence representing the insertion of <paramref name="insertedItems"/> into <paramref name="items"/>
            at the specified <paramref name="insertionIndex"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>, yielding a single concatenated string. 
            </summary>
            
            <param name="values">
            Zero or more <typeparamref name="T"/> items, such as an array of <see cref="T:System.String"/>.
            </param>
            
            <param name="separator">
            A <see cref="T:System.String"/> to insert in between all the <see cref="T:System.String"/> representations of the instances in
            <paramref name="values"/>.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            A <see cref="T:System.String"/> consisting of the elements of <paramref name="values"/> interspersed with the
            <paramref name="separator"/> string.
            </returns>
            
            <seealso cref="M:System.String.Join(System.String,System.String[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary>
            Concatenates a specified separator <see cref="T:System.String"/> between each element of a specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> - which are transformed to <see cref="T:System.String"/>
            instances by the specified <paramref name="stringifier"/>, yielding a single concatenated string. 
            </summary>
            
            <param name="values">
            Zero or more <typeparamref name="T"/> items, such as an array of <see cref="T:System.String"/>.
            </param>
            
            <param name="separator">
            A <see cref="T:System.String"/> to insert in between all the <see cref="T:System.String"/> representations of the instances in
            <paramref name="values"/>.
            </param>
            
            <param name="stringifier">
            The functor to use to convert <typeparamref name="T"/> instances to <see cref="T:System.String"/> instances.  Useful
            for using an <see cref="T:System.IFormatProvider"/> or for applying extra processing to the strings before they are
            joined.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            A <see cref="T:System.String"/> consisting of the elements of <paramref name="values"/> converted to strings by
            <paramref name="stringifier"/> and interspersed with the <paramref name="separator"/> string.
            </returns>
            
            <seealso cref="M:System.String.Join(System.String,System.String[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a transformation on every item of type <typeparamref name="T"/> in <paramref name="items"/> to
            yield as many items of type <typeparamref name="TResult"/>.
            </summary>
            
            <typeparam name="T">
            The type of items to convert from.
            </typeparam>
            
            <typeparam name="TResult">
            The type of items to convert to.
            </typeparam>
            
            <param name="items">
            One or more <typeparamref name="T"/> instances to convert.
            </param>
            
            <param name="transformer">
            A method that accepts an instance of <typeparamref name="T"/> and produces an instance of
            <typeparamref name="TResult"/>.
            </param>
            
            <returns>
            A number of <typeparamref name="TResult"/> instances that were created from <typeparamref name="T"/>
            instances.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumerableExtensions.QuoteForShell``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prepares a single <see cref="T:System.String"/> representing all the <paramref name="values"/> quoted as necessary
            for use when invoking a sub-process.
            </summary>
            
            <param name="values">
            Zero or more values to assemble into a single string.
            </param>
            
            <typeparam name="T">
            The type of items in <paramref name="values"/>.
            </typeparam>
            
            <returns>
            All the <paramref name="values"/> converted to <see cref="T:System.String"/>, quoted if they contained a space and
            separated by spaces.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.EnumExtensions">
            <summary>
            Extension methods to augment implementations of <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)">
            <summary>
            Determines if an <see cref="T:System.Enum"/> value contains the specified <paramref name="flag"/>.
            </summary>
            
            <typeparam name="T">
            The type of the <paramref name="enumValue"/> and the <paramref name="flag"/>.
            </typeparam>
            
            <param name="enumValue">
            An enum value to be tested.
            </param>
            
            <param name="flag">
            An enum value to test for.
            </param>
            
            <returns>
            <see langword="true"/> if <paramref name="flag"/> is found to make up [part of]
            <paramref name="enumValue"/>; <see langword="false"/> otherwise.
            </returns>
            
            <example>
            <para>
            The following code example prints the first letter of the words representing the colours making up a
            user-provided colour.
            </para>
            
            <code lang="C#">
            <![CDATA[
            using System;
            using SoftwareNinjas.Core;
            
            [Flags]
            enum PrimaryColours
            {
                Red = 1,
                Green = 2,
                Blue = 4,
            }
            
            class HasFlagDemo
            {
                static void DescribePrimaryColours(PrimaryColours targetColour)
                {
                    Console.Write ( targetColour.HasFlag(PrimaryColours.Red)   ? "R" : " " );
                    Console.Write ( targetColour.HasFlag(PrimaryColours.Green) ? "G" : " " );
                    Console.Write ( targetColour.HasFlag(PrimaryColours.Blue)  ? "B" : " " );
                }
            }
            ]]>
            </code>
            </example>
            
            <remarks>
            This method is simply a shortcut to performing a bitwise AND operation between the integer representation of
            <paramref name="enumValue"/> and the integer representation of <paramref name="flag"/> and testing the
            result for equality to <paramref name="flag"/>.
            </remarks>
            
            <seealso cref="T:System.Enum"/>
        </member>
        <member name="T:SoftwareNinjas.Core.Java">
            <summary>
            Convenience methods for Sun's programming language runtime and tools.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Java.GenerateFullPathToJavaDevelopmentKitHome">
            <summary>
            Determines the value of JAVA_HOME for the Java Development Kit (JDK), version 6 (also known as 1.6).
            </summary>
            
            <returns>
            The full path to the root of the JDK 1.6 installation.
            </returns>
            
            <exception cref="T:System.IO.FileNotFoundException">
            If the Java Development Kit (JDK) 1.6 cannot be found.
            </exception>
        </member>
        <member name="M:SoftwareNinjas.Core.Java.GenerateFullPathToCompiler">
            <summary>
            Determines the full path to the version 6 Java compiler.
            </summary>
            
            <returns>
            The full path to <c>javac.exe</c>.
            </returns>
            
            <exception cref="T:System.IO.FileNotFoundException">
            If the Java Development Kit (JDK) 1.6 cannot be found.
            </exception>
        </member>
        <member name="M:SoftwareNinjas.Core.Java.GenerateFullPathToRuntime">
            <summary>
            Determines the full path to the version 6 Java runtime.
            </summary>
            
            <returns>
            The full path to <c>java.exe</c>.
            </returns>
            
            <exception cref="T:System.IO.FileNotFoundException">
            If the Java Development Kit (JDK) 1.6 cannot be found.
            </exception>
        </member>
        <member name="T:SoftwareNinjas.Core.Pair`2">
            <summary>
            Provides a basic utility class that is used to store two related items.
            </summary>
            
            <typeparam name="F">
            The type of the first item.
            </typeparam>
            
            <typeparam name="S">
            The type of the second item.
            </typeparam>
            
            <seealso href="http://msdn.microsoft.com/en-us/library/system.web.ui.pair.aspx">System.Web.UI.Pair</seealso>
        </member>
        <member name="M:SoftwareNinjas.Core.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes an instance of the <see cref="T:SoftwareNinjas.Core.Pair`2"/> class, using the specified item pair.
            </summary>
            
            <param name="first">
            The first item to set.
            </param>
            
            <param name="second">
            The second item to set.
            </param>
        </member>
        <member name="P:SoftwareNinjas.Core.Pair`2.First">
            <summary>
            The first item.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Pair`2.Second">
            <summary>
            The second item.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.CapturedProcess">
            <summary>
            A façade to the <see cref="T:System.Diagnostics.Process"/> class for the special case of automatically (and safely) capturing
            and optionally relaying the contents of standard out and standard error.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.ICapturedProcess">
            <summary>
            A façade to sub-process launching, for the special case of automatically (and safely) capturing
            and optionally relaying the contents of standard out and standard error.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.ICapturedProcess.Run">
            <summary>
            Starts the process and waits for it to exit while capturing and, as necessary, relaying the contents of
            standard out and standard error.  Returns the value that the associated process specified when it
            terminated.
            </summary>
            
            <returns>
            The code that the associated process specified when it terminated.  The convention is to use <c>0</c>
            to indicate success and positive integers to indicate failure.
            </returns>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.ICapturedProcess.Arguments">
            <summary>
            The command-line parameters that will be processed into a single string to be provided to the program, if
            applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.ICapturedProcess.ArgumentString">
            <summary>
            The string of command-line parameters that will be provided to the program, if applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.ICapturedProcess.PathToExecutable">
            <summary>
            The name and optional location of the program to use when creating the sub-process.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.CapturedProcess.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String},System.Action{System.String})">
            <summary>
            Creates an instance of the <see cref="T:SoftwareNinjas.Core.Process.CapturedProcess"/> class with the specified
            <paramref name="pathToExecutable"/> as well as optional <paramref name="arguments"/>,
            <paramref name="standardOutHandler"/> and <paramref name="standardErrorHandler"/>.
            </summary>
            
            <param name="pathToExecutable">
            The path to the executable program from which a process will be created.
            </param>
            
            <param name="arguments">
            The command-line arguments to supply to the program.  The arguments will be quoted automatically.
            </param>
            
            <param name="standardOutHandler">
            An <see cref="T:System.Action`1"/> to execute for each line of text sent to the standard output stream by the
            sub-process.
            </param>
            
            <param name="standardErrorHandler">
            An <see cref="T:System.Action`1"/> to execute for each line of text sent to the standard error stream by the
            sub-process.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.CapturedProcess.Run">
            <summary>
            Starts the process and waits for it to exit while capturing and, as necessary, relaying the contents of
            standard out and standard error.  Returns the value that the associated process specified when it
            terminated.
            </summary>
            
            <returns>
            The code that the associated process specified when it terminated.  The convention is to use <c>0</c>
            to indicate success and positive integers to indicate failure.
            </returns>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.CapturedProcess.Arguments">
            <summary>
            The command-line parameters that will be processed into a single string to be provided to the program, if
            applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.CapturedProcess.ArgumentString">
            <summary>
            The string of command-line parameters that will be provided to the program, if applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.CapturedProcess.PathToExecutable">
            <summary>
            The name and optional location of the program to use when creating the sub-process.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.CapturedProcessFactory">
            <summary>
            An implementation of <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcessFactory"/> that creates instances of
            <see cref="T:SoftwareNinjas.Core.Process.CapturedProcess"/>.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.ICapturedProcessFactory">
            <summary>
            A factory for <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcess"/> implementations, thus allowing code that uses sub-processes to be
            tested without launching too many sub-processes and thus simplifying and speeding up unit tests.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.ICapturedProcessFactory.Create(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String},System.Action{System.String})">
            <summary>
            Initializes an instance of an implementation of <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcess"/> with the specified
            <paramref name="pathToExecutable"/> as well as optional <paramref name="arguments"/>,
            <paramref name="standardOutHandler"/> and <paramref name="standardErrorHandler"/>.
            </summary>
            
            <param name="pathToExecutable">
            The path to the executable program from which a process will be created.
            </param>
            
            <param name="arguments">
            The command-line arguments to supply to the program.  The arguments will be quoted automatically.
            </param>
            
            <param name="standardOutHandler">
            An <see cref="T:System.Action`1"/> to execute for each line of text sent to the standard output stream by the
            sub-process.
            </param>
            
            <param name="standardErrorHandler">
            An <see cref="T:System.Action`1"/> to execute for each line of text sent to the standard error stream by the
            sub-process.
            </param>
            
            <returns>
            An instance of the associated <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcess"/> implementation.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.Test.CapturedProcess">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.Process.CapturedProcess"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.CapturedProcess.Run_BothStreams">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.Process.CapturedProcess.Run"/> with a command that will output to both streams.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.CapturedProcess.Run_OnlyStandardOut">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.Process.CapturedProcess.Run"/> with a command that will output to only standard out.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.CapturedProcess.Run_OnlyStandardError">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.Process.CapturedProcess.Run"/> with a command that will output to only standard error.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess">
            <summary>
            An implementation of <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcess"/> that simulates the execution of a sub-process and
            feeds to the standard out and standard error handlers pre-arranged strings.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess"/> with the specified
            <paramref name="exitCode"/> and optional <paramref name="stdOut"/> and <paramref name="stdErr"/>.
            </summary>
            
            <param name="exitCode">
            The exit code that <see cref="M:SoftwareNinjas.Core.Process.ICapturedProcess.Run"/> will return.
            </param>
            
            <param name="stdOut">
            An optional multi-line string that will be fed to the standard out handler one line at a time.
            </param>
            
            <param name="stdErr">
            An optional multi-line string that will be fed to the standard error handler one line at a time.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of a <see cref="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess"/> with the specified
            <paramref name="exitCode"/> and optional <paramref name="stdOut"/> and <paramref name="stdErr"/>.
            </summary>
            
            <param name="exitCode">
            The exit code that <see cref="M:SoftwareNinjas.Core.Process.ICapturedProcess.Run"/> will return.
            </param>
            
            <param name="stdOut">
            An optional <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/> that will be fed to the standard out
            handler one at a time.
            </param>
            
            <param name="stdErr">
            An optional <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/> that will be fed to the standard error
            handler one at a time.
            </param>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.StandardOutHandler">
            <summary>
            The configured <see cref="T:System.Action`1"/> to invoke for each line of standard out.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.StandardErrorHandler">
            <summary>
            The configured <see cref="T:System.Action`1"/> to invoke for each line of standard error.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.Arguments">
            <summary>
            The command-line parameters that will be processed into a single string to be provided to the program, if
            applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.ArgumentString">
            <summary>
            The string of command-line parameters that will be provided to the program, if applicable.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess.PathToExecutable">
            <summary>
            The name and optional location of the program to use when creating the sub-process.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcessFactory">
            <summary>
            An implementation of <see cref="T:SoftwareNinjas.Core.Process.ICapturedProcessFactory"/> that configures a single instance of
            <see cref="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess"/> for testing purposes.  This class is not thread-safe.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcessFactory.#ctor(SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess)">
            <summary>
            Initializes an instance of the <see cref="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcessFactory"/> with the specified
            <paramref name="instance"/>.
            </summary>
            
            <param name="instance">
            A single instance of <see cref="T:SoftwareNinjas.Core.Process.Test.SimulatedCapturedProcess"/> that will be configured on each call to
            <see cref="M:SoftwareNinjas.Core.Process.ICapturedProcessFactory.Create(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Action{System.String},System.Action{System.String})"/>.
            </param>
        </member>
        <member name="T:SoftwareNinjas.Core.StringExtensions">
            <summary>
            Extension methods to augment implementations of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.String"/> object occurs within this string. 
            </summary>
            
            <param name="s">
            The <see cref="T:System.String"/> in which to search.
            </param>
            
            <param name="value">
            The <see cref="T:System.String"/> object to seek.
            </param>
            
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter occurs within this string,
            or if <paramref name="value"/> is the empty string (""); otherwise, <see langword="false"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            
            <exception cref="T:System.ArgumentException">
            <paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value.
            </exception>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.FormatInvariant(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent of the value of a
            corresponding <see cref="T:System.Object"/> instance in a specified array, using the
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> for formatting.
            </summary>
            
            <param name="format">
            A composite format string.
            </param>
            
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the <see cref="T:System.String"/>
            equivalent of the corresponding instances of <see cref="T:System.Object"/> in <paramref name="args"/>.
            </returns>
            
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.FormatCurrentCulture(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent of the value of a
            corresponding <see cref="T:System.Object"/> instance in a specified array, using the
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> for formatting.
            </summary>
            
            <param name="format">
            A composite format string.
            </param>
            
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the <see cref="T:System.String"/>
            equivalent of the corresponding instances of <see cref="T:System.Object"/> in <paramref name="args"/>.
            </returns>
            
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.FormatCurrentUICulture(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent of the value of a
            corresponding <see cref="T:System.Object"/> instance in a specified array, using the
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> for formatting.
            </summary>
            
            <param name="format">
            A composite format string.
            </param>
            
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the <see cref="T:System.String"/>
            equivalent of the corresponding instances of <see cref="T:System.Object"/> in <paramref name="args"/>.
            </returns>
            
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.FormatProvider(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with the text equivalent of the value of a
            corresponding <see cref="T:System.Object"/> instance in a specified array.  A specified parameter supplies
            culture-specific formatting information.
            </summary>
            
            <param name="format">
            A composite format string.
            </param>
            
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
            
            <param name="args">
            An <see cref="T:System.Object"/> array containing zero or more objects to format. 
            </param>
            
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the <see cref="T:System.String"/>
            equivalent of the corresponding instances of <see cref="T:System.Object"/> in <paramref name="args"/>.
            </returns>
            
            <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.InsertLines(System.String,System.String,System.Int32)">
            <summary>
            Merges two strings such that the lines of <paramref name="input"/> before
            <paramref name="insertionLineNumber"/> will appear before the lines of <paramref name="inserted"/> and
            finally the remaining lines of <paramref name="input"/> will be appear.
            </summary>
            
            <param name="input">
            The <see cref="T:System.String"/> in which to insert <paramref name="inserted"/>.
            </param>
            
            <param name="inserted">
            The <see cref="T:System.String"/> to insert inside <paramref name="input"/>.
            </param>
            
            <param name="insertionLineNumber">
            The (one-based) line number at which to insert <paramref name="inserted"/> into <paramref name="input"/>.
            </param>
            
            <returns>
            A <see cref="T:System.String"/> representing the insertion of <paramref name="inserted"/> at the specified
            <paramref name="insertionLineNumber"/> inside of <paramref name="input"/>.
            </returns>
            
            <remarks>
            This is a special case of <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)"/>.
            </remarks>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.Lines(System.String)">
            <summary>
            Enumerates the lines of text inside the string.
            </summary>
            
            <param name="input">
            The string to process on a line-by-line basis.
            </param>
            
            <returns>
            An enumeration of the lines contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.StringExtensions.CombinePath(System.String,System.String[])">
            <summary>
            Combines all the path fragments together.
            </summary>
            
            <param name="input">
            The first fragment.
            </param>
            
            <param name="pathFragments">
            The subsequent fragment(s).
            </param>
            
            <returns>
            All fragments assembled - with the appropriate separator - into a single <see cref="T:System.String"/>.
            </returns>
            
            <remarks>
            This is equivalent to cascading calls to <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>.
            </remarks>
            
            <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/>
        </member>
        <member name="T:System.Action">
            <summary>
            Encapsulates a method that takes no parameters and does not return a value.
            </summary>
        </member>
        <member name="T:System.Action`2">
            <summary>
            Encapsulates a method that has two parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Action`3">
            <summary>
            Encapsulates a method that takes three parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Action`4">
            <summary>
            Encapsulates a method that has four parameters and does not return a value.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T4">
            The type of the fourth parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg4">
            The fourth parameter of the method that this delegate encapsulates.
            </param>
        </member>
        <member name="T:System.Func`1">
            <summary>
            Encapsulates a method that has no parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`2">
            <summary>
            Encapsulates a method that has one parameter and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg">
            The parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`3">
            <summary>
            Encapsulates a method that has two parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`4">
            <summary>
            Encapsulates a method that has three parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Func`5">
            <summary>
            Encapsulates a method that has four parameters and returns a value of the type specified by the
            <typeparamref name="TResult"/> parameter.
            </summary>
            
            <typeparam name="T1">
            The type of the first parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T2">
            The type of the second parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T3">
            The type of the third parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="T4">
            The type of the fourth parameter of the method that this delegate encapsulates.
            </typeparam>
            
            <typeparam name="TResult">
            The type of the return value of the method that this delegate encapsulates.
            </typeparam>
            
            <param name="arg1">
            The first parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg2">
            The second parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg3">
            The third parameter of the method that this delegate encapsulates.
            </param>
            
            <param name="arg4">
            The fourth parameter of the method that this delegate encapsulates.
            </param>
            
            <returns>
            The return value of the method that this delegate encapsulates.
            </returns>
        </member>
        <member name="T:System.Linq.Enumerable">
            <summary>
            Re-implements parts of System.Core.dll for use with .NET 2.0
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the last element of.
            </param>
            
            <returns>
            The value at the last position in the source sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for emptiness.
            </param>
            
            <returns>
            <see langword="true"/> if the source sequence contains any elements; otherwise <see langword="false"/>.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:System.Linq.Test.Enumerable">
            <summary>
            A class to test <see cref="T:System.Linq.Enumerable"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Last_FromMsdnExample">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"/>
            with an adaptation of the example in the MSDN code documentation.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Last_EmptySequence">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"/>
            with an empty sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Last_NullSequence">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"/>
            with a null sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Any_FromMsdnExample">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
            with an adaptation of the example in the MSDN code documentation.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Any_EmptySequence">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
            with an empty sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Test.Enumerable.Any_NullSequence">
            <summary>
            Tests <see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"/>
            with a null sequence.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Enable C# 3.0 extensions without referencing System.Core.dll
            </summary>
            
            <seealso href="http://www.danielmoth.com/Blog/2007/05/using-extension-methods-in-fx-20.html"/>
            <seealso href="http://social.msdn.microsoft.com/forums/en-US/vcsharp2008prerelease/thread/9d88f8b1-ff03-4ea6-bd41-8cca9f2cd485/"/>
        </member>
        <member name="T:SoftwareNinjas.Core.RegisteredUserAttribute">
            <summary>
            Represents data about the user for which an assembly was compiled.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class with the specified
            human-readable version of the user's name and their e-mail address.
            </summary>
            
            <param name="displayName">
            The full name of the user who registered the software.
            </param>
            
            <param name="emailAddress">
            The e-mail addressed used when registering the assembly.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.ExtractFrom(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class based on its use in the
            specified assembly.
            </summary>
            
            <param name="assembly">
            The <see cref="T:System.Reflection.Assembly"/> in which to search for the attribute.
            </param>
            
            <returns>
            A <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> from the assembly.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.RegisteredUserAttribute.ExtractFromCallingAssembly">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> class based on its use in the
            calling assembly.
            </summary>
            
            <returns>
            A <see cref="T:SoftwareNinjas.Core.RegisteredUserAttribute"/> from the calling assembly.
            </returns>
        </member>
        <member name="P:SoftwareNinjas.Core.RegisteredUserAttribute.DisplayName">
            <summary>
            The full name of the user, to be used in labels, etc.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.RegisteredUserAttribute.EmailAddress">
            <summary>
            The e-mail address of the user, to be used in hyperlinks, etc.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Test.EnumerableExtensions">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.EnumerableExtensions"/>
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Prefix">
            <summary>
            Tests both <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(``0,System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Suffix">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},``0)"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Compose_Append">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.EnumerateSame``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convenience method for making sure two <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances will enumerate identical
            items.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="expected">
            The expected elements.
            </param>
            
            <param name="actual">
            The actual elements.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.EnumerateSame``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            Convenience method for making sure two <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances will enumerate identical
            items.
            </summary>
            
            <typeparam name="T">
            The type of elements to enumerate.
            </typeparam>
            
            <param name="expected">
            The expected elements.
            </param>
            
            <param name="actual">
            The actual elements.
            </param>
            
            <param name="comparisonBasis">
            A method to use to manipulate the <typeparamref name="T"/> (perhaps extract a value) into what will be
            used to check if each <typeparamref name="T"/> is equal.
            </param>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.FirstOrDefault_EmptySequence">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> method with
            empty sequences.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.FirstOrDefault_SequenceWithOneItem">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> method with
            sequences that contain one item.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.ForElse_HasOneItem">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)"/> with
            the case there the <see cref="T:System.Collections.Generic.IEnumerable`1"/> yields only one item.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.ForElse_HasItems">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)"/> with
            the typical case.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.ForElse_StopAfterOne">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action)"/> with
            the delegate returning <see langword="false"/>, which should end the enumeration right then and there.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.ForElse_HasNoItems">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.ForElse``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)"/> with
            the exceptional case where the <see cref="T:System.Collections.Generic.IEnumerable`1"/> did not yield any items.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Insert_Typical">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method
            with the typical case.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Insert_TypicalWithMultiLineStrings">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method
            with the typical case, this time using multi-line strings.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Insert_AtTheBeginning">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method
            with the edge case of the inserted items going before all the items, like calling
            <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Insert_AtTheEnd">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method
            with the edge case of the inserted items going after all the items, like calling
            <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Compose``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.Join">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumerableExtensions.QuoteForShell">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumerableExtensions.QuoteForShell``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Test.EnumExtensions">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.EnumExtensions"/>
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumExtensions.HasFlag_Typical">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)"/> with
            the typical case:  an enum decorated with the <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumExtensions.HasFlag_Identity">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)"/> with
            the base case that a single flag should be identified as "set".
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumExtensions.HasFlag_NotSet">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)"/> with
            the base case that if a flag isn't set, it should not register.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumExtensions.HasFlag_Integers">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)"/> with
            the less likely (but still possible) case of integers.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.EnumExtensions.HasFlag_Strings">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.EnumExtensions.HasFlag``1(``0,``0)"/> with
            the even less likely (but still possible!) case of strings representing integers.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Test.StringExtensions">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.StringExtensions"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.Contains_SimpleScenarios">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.StringExtensions.Contains(System.String,System.String,System.StringComparison)"/> method with
            a few simple scenarios.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.FormatInvariant_NoArgs">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.FormatInvariant(System.String,System.Object[])"/>
            with no arguments.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.FormatInvariant_OneArg">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.FormatInvariant(System.String,System.Object[])"/>
            with one argument.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.FormatInvariant_ManyArgs">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.FormatInvariant(System.String,System.Object[])"/>
            with many arguments.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.FormatProvider_NoArgs">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.FormatProvider(System.String,System.IFormatProvider,System.Object[])"/>
            with no arguments.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.FormatProvider_OneArg">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.FormatProvider(System.String,System.IFormatProvider,System.Object[])"/>
            with one argument.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.Insert_Typical">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.StringExtensions.InsertLines(System.String,System.String,System.Int32)"/> method with
            the typical case.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.Lines_Empty">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.Lines(System.String)"/>
            with an empty string.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.Lines_OneLine">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.Lines(System.String)"/>
            with a string that's only one line.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.Lines_Typical">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.Lines(System.String)"/>
            with a multi-line string.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.CombinePath_ZeroArguments">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.CombinePath(System.String,System.String[])"/>
            with zero additional path fragments.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.CombinePath_OneArgument">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.CombinePath(System.String,System.String[])"/>
            with a single path fragment to add.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.StringExtensions.CombinePath_TwoArguments">
            <summary>
            Tests <see cref="M:SoftwareNinjas.Core.StringExtensions.CombinePath(System.String,System.String[])"/>
            by adding two path fragments.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Test.TreeExtensions">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.TreeExtensions"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.TreeExtensions.PreOrder_OnlyOneNode">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.TreeExtensions.PreOrder``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> method with
            the special case of a single node and no children.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.TreeExtensions.PreOrder_OneLevel">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.TreeExtensions.PreOrder``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> method with
            the scenario of a single level of nodes.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Test.TreeExtensions.PreOrder_MultipleLevels">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.TreeExtensions.PreOrder``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})"/> method with
            what a high-level parse tree of a code file might look like.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.TextReaderExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.TextReaderExtensions.Lines(System.IO.TextReader)">
            <summary>
            Enumerates the lines of text provided by the <paramref name="reader"/>.
            </summary>
            
            <param name="reader">
            The <see cref="T:System.IO.TextReader"/> to process on a line-by-line basis.
            </param>
            
            <returns>
            A sequence of the lines of text provided by the stream underlying the specified <paramref name="reader"/>.
            </returns>
        </member>
        <member name="T:SoftwareNinjas.Core.Text.BruteForceMatcher`1">
            <summary>
            A naïve implementation of <see cref="T:SoftwareNinjas.Core.Text.IMatcher`1"/> that checks everything, every time.
            </summary>
            
            <typeparam name="T">
            The type of <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> to search for by their <see cref="T:System.String"/> representation.
            </typeparam>
        </member>
        <member name="T:SoftwareNinjas.Core.Text.IMatcher`1">
            <summary>
            Represents a strategy for searching items of type <typeparamref name="T"/> by their <see cref="T:System.String"/>
            representations.
            </summary>
            
            <typeparam name="T">
            The type of <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> whose <see cref="T:System.String"/> representation will be matched on for searching.
            </typeparam>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchAnywhere(System.String)">
            <summary>
            Returns a sequence of <typeparamref name="T"/> items whose <see cref="T:System.String"/> representations were matched
            by the provided <paramref name="characters"/> anywhere said representation.
            </summary>
            
            <param name="characters">
            One or more characters to search for in the <see cref="T:System.String"/> representation of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/>.
            </param>
            
            <returns>
            A sequence of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> whose <see cref="T:System.String"/> representations matched
            <paramref name="characters"/> anywhere.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchFromStartThenAnywhere(System.String)">
            <summary>
            Returns a sequence of <typeparamref name="T"/> items whose <see cref="T:System.String"/> representations were matched
            by the provided <paramref name="characters"/> at the beginning of said representation, then those items
            whose <see cref="T:System.String"/> representations were matched anywhere.
            </summary>
            
            <param name="characters">
            One or more characters to search for in the <see cref="T:System.String"/> representation of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/>.
            </param>
            
            <returns>
            A sequence of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> whose <see cref="T:System.String"/> representations matched
            <paramref name="characters"/> at the start or anywhere.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchFromStart(System.String)">
            <summary>
            Returns a sequence of <typeparamref name="T"/> items whose <see cref="T:System.String"/> representations were matched
            by the provided <paramref name="characters"/> at the beginning of said representation.
            </summary>
            
            <param name="characters">
            One or more characters to search for in the <see cref="T:System.String"/> representation of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/>.
            </param>
            
            <returns>
            A sequence of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> whose <see cref="T:System.String"/> representations matched
            <paramref name="characters"/> at the start.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchCamelCasingHumps(System.String)">
            <summary>
            Returns a sequence of <typeparamref name="T"/> items whose <see cref="T:System.String"/> representations were matched
            by the provided <paramref name="characters"/> such that uppercase letters are matched with uppercase
            letters in said representations and optionally disambiguated by lowercase letters.
            </summary>
            
            <param name="characters">
            One or more characters to search for in the <see cref="T:System.String"/> representation of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/>.
            </param>
            
            <returns>
            A sequence of the <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> whose <see cref="T:System.String"/> representations matched
            <paramref name="characters"/> as camel-cased humps.
            </returns>
        </member>
        <member name="P:SoftwareNinjas.Core.Text.IMatcher`1.ComparisonType">
            <summary>
            The type of <see cref="T:System.String"/> comparison to use.
            </summary>
        </member>
        <member name="P:SoftwareNinjas.Core.Text.IMatcher`1.Items">
            <summary>
            The items to search.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.BruteForceMatcher`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.Text.BruteForceMatcher`1"/> with an empty list of
            <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.BruteForceMatcher`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.Text.BruteForceMatcher`1"/> with the provided
            <paramref name="items"/>.
            </summary>
            
            <param name="items">
            A sequence of instances of <typeparamref name="T"/> that will be searched for by their string
            representation.
            </param>
        </member>
        <member name="P:SoftwareNinjas.Core.Text.BruteForceMatcher`1.ComparisonType">
            <summary>
            The type of <see cref="T:System.String"/> comparison to use.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Text.Test.AbstractMatcher">
            <summary>
            A class to test implementations of <see cref="T:SoftwareNinjas.Core.Text.IMatcher`1"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.AbstractMatcher.CreateImplementation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            When implemented by subclasses, creates a new instance of the class under test, initialized with the
            provided <paramref name="items"/>.
            </summary>
            
            <typeparam name="T">
            The type of <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> to search for by their <see cref="T:System.String"/> representation.
            </typeparam>
            
            <param name="items">
            A sequence of instances of <typeparamref name="T"/> that will be searched for by their string
            representation.
            </param>
            
            <returns>
            A new instance on each call.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.AbstractMatcher.MatchAnywhere_Agriculture">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchAnywhere(System.String)"/> method with
            the <see cref="F:SoftwareNinjas.Core.Text.Test.AbstractMatcher.Agriculture"/> set.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.AbstractMatcher.MatchFromStartThenAnywhere_Agriculture">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchFromStartThenAnywhere(System.String)"/> method with
            the <see cref="F:SoftwareNinjas.Core.Text.Test.AbstractMatcher.Agriculture"/> set.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.AbstractMatcher.MatchFromStart_Agriculture">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchFromStart(System.String)"/> method with
            the <see cref="F:SoftwareNinjas.Core.Text.Test.AbstractMatcher.Agriculture"/> set.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.AbstractMatcher.MatchCamelCasingHumps_Agriculture">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.IMatcher`1.MatchCamelCasingHumps(System.String)"/> method with
            the <see cref="F:SoftwareNinjas.Core.Text.Test.AbstractMatcher.Agriculture"/> set.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.Text.Test.BruteForceMatcher">
            <summary>
            A class to test <see cref="T:SoftwareNinjas.Core.Text.BruteForceMatcher`1"/>.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.BruteForceMatcher.CreateImplementation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:SoftwareNinjas.Core.Text.BruteForceMatcher`1"/> with the provided
            <paramref name="items"/>.
            </summary>
            
            <typeparam name="T">
            The type of <see cref="P:SoftwareNinjas.Core.Text.IMatcher`1.Items"/> to search for by their <see cref="T:System.String"/> representation.
            </typeparam>
            
            <param name="items">
            A sequence of instances of <typeparamref name="T"/> that will be searched for by their string
            representation.
            </param>
            
            <returns>
            A new instance on each call.
            </returns>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.BruteForceMatcher.ConvertToRegexOptions_AllPossibilities">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.BruteForceMatcher`1.ConvertToRegexOptions(System.StringComparison)"/> method with
            all possible values.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.Text.Test.BruteForceMatcher.ConvertSpecificationToPattern_Typical">
            <summary>
            Tests the <see cref="M:SoftwareNinjas.Core.Text.BruteForceMatcher`1.ConvertSpecificationToPattern(System.String)"/> method with
            the typical cases.
            </summary>
        </member>
        <member name="T:SoftwareNinjas.Core.TreeExtensions">
            <summary>
            Extension methods for tree-based structures.
            </summary>
        </member>
        <member name="M:SoftwareNinjas.Core.TreeExtensions.PreOrder``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Traverses a tree of objects by visiting the <paramref name="startingPoint"/> and then its children,
            recursively.
            </summary>
            
            <typeparam name="T">
            The type of the <paramref name="startingPoint"/> as well as any children encountered along the way.
            </typeparam>
            
            <param name="startingPoint">
            The node from which the traversal will begin.
            </param>
            
            <param name="children">
            A method that can obtain the children of instances of <typeparamref name="T"/>.
            </param>
            
            <returns>
            A sequence of the nodes in the tree.
            </returns>
        </member>
    </members>
</doc>
