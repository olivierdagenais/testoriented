//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftwareNinjas.TestOriented.Core {
    using SoftwareNinjas.Core;
    using ICSharpCode.NRefactory.Ast;
    
    
    public partial class MethodCallStub : AbstractMethodTemplate {
        
        /// <summary>
        /// Generates the text output of the transformation.
        /// </summary>
        /// 
        /// <returns>
        /// A string representing the generated text output of the text template transformation process.
        /// </returns>
        /// 
        /// <remarks>
        /// The text template transformation process has two steps. In the first step, the text template transformation
        /// engine creates a class that is named the generated transformation class. In the second step, the engine
        /// compiles and executes the generated transformation class, to produce the generated text output. The engine
        /// calls <see cref="TransformText"/> on the compiled generated transformation class to execute the text
        /// template and generate the text output.
        /// </remarks>
        public override string TransformText() {
            
            #line 4 "MethodCallStub.tt"
 foreach ( var parameter in Method.Parameters ) { 
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write("\t");
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write( DetermineDeclarationForType(parameter.TypeReference) );
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write( parameter.ParameterName );
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write( DefaultValue(parameter.TypeReference) );
            
            #line default
            #line hidden
            
            #line 5 "MethodCallStub.tt"
            this.Write(";\r\n");
            
            #line default
            #line hidden
            
            #line 6 "MethodCallStub.tt"
 } 
            
            #line default
            #line hidden
            
            #line 7 "MethodCallStub.tt"
            this.Write("\t");
            
            #line default
            #line hidden
            
            #line 7 "MethodCallStub.tt"
 if ( HasReturnValue ) { 
            
            #line default
            #line hidden
            
            #line 8 "MethodCallStub.tt"
            this.Write( DetermineDeclarationForType(Method.TypeReference) );
            
            #line default
            #line hidden
            
            #line 8 "MethodCallStub.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 8 "MethodCallStub.tt"
            this.Write( ReturnVariableName );
            
            #line default
            #line hidden
            
            #line 8 "MethodCallStub.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 8 "MethodCallStub.tt"

	} 
            
            #line default
            #line hidden
            
            #line 10 "MethodCallStub.tt"
            this.Write( ParentType.Name );
            
            #line default
            #line hidden
            
            #line 10 "MethodCallStub.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 10 "MethodCallStub.tt"
            this.Write( Method.Name );
            
            #line default
            #line hidden
            
            #line 10 "MethodCallStub.tt"
            this.Write(" ( ");
            
            #line default
            #line hidden
            
            #line 10 "MethodCallStub.tt"
            this.Write( 
		Method.Parameters.Join(", ", p => p.ParameterName ) );
            
            #line default
            #line hidden
            
            #line 11 "MethodCallStub.tt"
            this.Write(" );");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
}
