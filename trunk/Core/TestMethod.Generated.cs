//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4918
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftwareNinjas.TestOriented.Core {
    using SoftwareNinjas.Core;
    using ICSharpCode.NRefactory.Ast;
    
    
    public partial class TestMethod : Microsoft.VisualStudio.TextTemplating.TextTransformation {
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestMethod"/> class.
        /// </summary>
        public TestMethod() : 
                base() {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TestMethod"/> class
        /// using the specified <paramref name="formatProvider"/>
        /// </summary>
        public TestMethod(System.IFormatProvider formatProvider) : 
                base(formatProvider) {
        }
        
        /// <summary>
        /// Generates the text output of the transformation.
        /// </summary>
        /// 
        /// <returns>
        /// A string representing the generated text output of the text template transformation process.
        /// </returns>
        /// 
        /// <remarks>
        /// The text template transformation process has two steps. In the first step, the text template transformation
        /// engine creates a class that is named the generated transformation class. In the second step, the engine
        /// compiles and executes the generated transformation class, to produce the generated text output. The engine
        /// calls <see cref="TransformText"/> on the compiled generated transformation class to execute the text
        /// template and generate the text output.
        /// </remarks>
        public override string TransformText() {
            
            #line 4 "TestMethod.tt"
            this.Write("\r\n/// <summary>\r\n/// Tests the <c>");
            
            #line default
            #line hidden
            
            #line 6 "TestMethod.tt"
            this.Write( Method.Name );
            
            #line default
            #line hidden
            
            #line 6 "TestMethod.tt"
            this.Write("</c> method with\r\n/// TODO: write about scenario\r\n/// </summary>\r\n[Test]\r\npublic " +
                    "void ");
            
            #line default
            #line hidden
            
            #line 10 "TestMethod.tt"
            this.Write( Method.Name );
            
            #line default
            #line hidden
            
            #line 10 "TestMethod.tt"
            this.Write("_TODO ( ) {\r\n\tAssert.Fail ( \"TODO: initialize variable(s) and expected value\" );\r" +
                    "\n");
            
            #line default
            #line hidden
            
            #line 12 "TestMethod.tt"
 foreach ( var parameter in Method.Parameters ) { 
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write("\t");
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write( parameter.TypeReference );
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write( parameter.ParameterName );
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write( DefaultValue(parameter.TypeReference) );
            
            #line default
            #line hidden
            
            #line 13 "TestMethod.tt"
            this.Write(";\r\n");
            
            #line default
            #line hidden
            
            #line 14 "TestMethod.tt"
 } 
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write("\t");
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write( Method.TypeReference );
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write(" actual = ");
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write( ClassUnderTest.Name );
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write( Method.Name );
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write(" ( ");
            
            #line default
            #line hidden
            
            #line 15 "TestMethod.tt"
            this.Write( 
		Method.Parameters.Join(", ", p => p.ParameterName ) );
            
            #line default
            #line hidden
            
            #line 16 "TestMethod.tt"
            this.Write(" );\r\n\t");
            
            #line default
            #line hidden
            
            #line 17 "TestMethod.tt"
            this.Write( Method.TypeReference );
            
            #line default
            #line hidden
            
            #line 17 "TestMethod.tt"
            this.Write(" expected = ");
            
            #line default
            #line hidden
            
            #line 17 "TestMethod.tt"
            this.Write( DefaultValue(Method.TypeReference) );
            
            #line default
            #line hidden
            
            #line 17 "TestMethod.tt"
            this.Write(";\r\n\tAssert.AreEqual ( expected, actual );\r\n}\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
}
